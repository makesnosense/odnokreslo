---
import CopyAddressButton from "./CopyAddressButton.astro";
import OpenInMapsButton from "./OpenInMapsButton.astro";
import MapToggleButton from "./MapToggleButton.astro";
---

<section class="location-section">
  <div class="address">
    <p class="street-address">
      Москва, Новый Арбат, 34с1 <CopyAddressButton />
    </p>
    <p>ПН–ВС: 13:00–22:00</p>
    <p>По предварительной записи</p>
    <p>Бесплатная парковка на территории</p>
  </div>
  <div class="map-container">
    <div class="map grayscale"></div>
    <OpenInMapsButton />
    <MapToggleButton />
  </div>

  <script>
    const copyBtn =
      document.querySelector<HTMLButtonElement>(".copy-address-btn");
    if (!copyBtn) {
      throw new Error("Copy address button not found");
    }

    const addressText = "Москва, Новый Арбат, 34с1";

    copyBtn.addEventListener("click", async () => {
      try {
        await navigator.clipboard.writeText(addressText);
        copyBtn.classList.add("copied");
        setTimeout(() => {
          copyBtn.classList.remove("copied");
        }, 2000);
      } catch (err) {
        console.error("failed to copy address:", err);
      }
    });
  </script>

  <script
    is:inline
    async
    src="https://api-maps.yandex.ru/v3/?apikey=d03e0055-6f9f-4639-8d4d-a43b12acccc3&lang=ru_RU"
  ></script>

  <script>
    import type { YMapLocationRequest } from "@yandex/ymaps3-types";
    import "@yandex/ymaps3-default-ui-theme/dist/esm/index.css";

    declare global {
      interface Window {
        ymaps3: typeof ymaps3;
      }
    }

    const loadYmaps3 = (): Promise<void> => {
      return new Promise((resolve) => {
        const checkYmapsLoaded = () => {
          if (window.ymaps3) {
            ymaps3.ready.then(resolve);
          } else {
            setTimeout(checkYmapsLoaded, 50);
          }
        };
        checkYmapsLoaded();
      });
    };

    await loadYmaps3();

    const {
      YMap,
      YMapDefaultSchemeLayer,
      YMapControls,
      YMapDefaultFeaturesLayer,
    } = ymaps3;
    const { YMapZoomControl, YMapDefaultMarker } = await import(
      "@yandex/ymaps3-default-ui-theme"
    );

    const mapContainer = document.querySelector<HTMLElement>(
      ".location-section .map-container",
    );
    const mapElement = document.querySelector<HTMLElement>(
      ".location-section .map",
    );
    const toggleBtn = document.querySelector<HTMLButtonElement>(
      ".location-section .map-toggle-btn",
    );
    const mapHint = document.querySelector<HTMLElement>(
      ".location-section .map-hint",
    );
    const openMapsBtn = document.querySelector<HTMLElement>(
      ".yandex-open-maps-btn",
    );

    if (
      !mapContainer ||
      !mapElement ||
      !toggleBtn ||
      !mapHint ||
      !openMapsBtn
    ) {
      throw new Error("Not all of the map elements are present");
    }

    const toggleButtonAnimations =
      toggleBtn.querySelectorAll<SVGAnimateElement>(".colored-animation");

    if (!toggleButtonAnimations) {
      throw new Error("Toggle button animation elements is not found");
    }

    const MAP_CENTER: YMapLocationRequest = {
      center: [37.584, 55.7542],
      zoom: 14,
    };

    const isTouchDevice =
      "ontouchstart" in window || navigator.maxTouchPoints > 0;

    // hide button on desktop
    if (!isTouchDevice) {
      toggleBtn.style.display = "none";
    }

    const map = new YMap(
      mapElement,
      {
        location: MAP_CENTER,
        copyrightsPosition: "bottom right",
        behaviors: isTouchDevice ? [] : ["drag"],
      },
      [new YMapDefaultSchemeLayer({}), new YMapDefaultFeaturesLayer({})],
    );

    const controls = new YMapControls({ position: "right" });
    controls.addChild(new YMapZoomControl({ easing: "ease-in-out" }));
    map.addChild(controls);

    const salonMarker = new YMapDefaultMarker({
      coordinates: [37.579055, 55.753136],
      iconName: "hairdressers",
      title: "ОДНО КРЕСЛО",
      subtitle: "Новый Арбат, 34с1",
      color: "silver",
      size: "normal",
      onClick: () => {
        window.open(
          "https://yandex.ru/maps/-/CLbwQ87U",
          "_blank",
          "noopener,noreferrer",
        );
      },
    });

    map.addChild(salonMarker);

    // toggle logic for mobile
    if (isTouchDevice) {
      let isMapActive = false;
      let hintTimeout: number | null = null;

      // initially, map doesn't intercept touches
      mapElement.style.pointerEvents = "none";

      const showHint = () => {
        mapHint.classList.add("visible");
        mapElement.classList.add("blurred");

        toggleButtonAnimations.forEach((animation) => animation.beginElement());

        if (hintTimeout) {
          clearTimeout(hintTimeout);
        }
        hintTimeout = window.setTimeout(() => {
          mapHint.classList.remove("visible");
          mapElement.classList.remove("blurred");
          toggleButtonAnimations.forEach((animation) => animation.endElement());
        }, 2000);
      };

      const hideHint = () => {
        mapHint.classList.remove("visible");
        mapElement.classList.remove("blurred");
        toggleButtonAnimations.forEach((animation) => animation.endElement());
        if (hintTimeout) {
          clearTimeout(hintTimeout);
          hintTimeout = null;
        }
      };

      mapContainer.addEventListener("touchstart", (event) => {
        if (!isMapActive) {
          const target = event.target as HTMLElement;
          if (!target.closest("button")) {
            showHint();
          }
        }
      });

      const toggleMapInteraction = () => {
        isMapActive = !isMapActive;
        hideHint();

        if (isMapActive) {
          // enable map interaction, disable page scroll
          map.setBehaviors(["drag", "pinchZoom"]);
          mapElement.style.pointerEvents = "auto";
          mapElement.style.touchAction = "none";

          mapElement.classList.remove("grayscale");
          openMapsBtn.classList.remove("grayscale");
          toggleBtn.classList.add("enabled");
        } else {
          // disable map interaction, enable page scroll
          map.setBehaviors([]);
          mapElement.style.pointerEvents = "none";
          mapElement.style.touchAction = "auto";
          mapElement.classList.add("grayscale");
          openMapsBtn.classList.add("grayscale");
          toggleBtn.classList.remove("enabled");
        }
      };

      toggleBtn.addEventListener("click", toggleMapInteraction);
    }
  </script>

  <style>
    .location-section {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      row-gap: 1rem;
      padding-top: 1rem;
    }

    .street-address {
      position: relative;
    }

    .address {
      line-height: 2;
      text-align: center;
    }

    .map-container {
      width: 100%;
      height: 320px;
      padding: 0;
      position: relative;
      touch-action: manipulation;

      & .map {
        --map-blur: ;
        --map-desaturate: ;

        width: 100%;
        height: 100%;
        border: solid 1px rgba(0, 0, 0, 0.3);
        cursor: grab;
        filter: var(--map-blur) var(--map-desaturate);
        transition: filter 0.3s ease;

        &:active {
          cursor: grabbing;
        }

        &.blurred {
          --map-blur: blur(1.5px) brightness(0.95);
        }

        &.grayscale {
          --map-desaturate: grayscale(100%);
        }
      }
    }
  </style>
</section>
